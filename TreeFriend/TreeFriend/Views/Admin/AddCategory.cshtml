@{
    Layout = "_AdminLayout";
}
<link rel="stylesheet" href="~/css/Admin/addCategory.css">


<div id="resultDiv" class="container-fluid">
    <div class="row justify-content-around h-100">
        <div class="col-5 d-flex flex-column justify-content-between">
            <div class="input-div d-flex flex-column justify-content-center">
                <div class="d-flex justify-content-center m-0">
                    <select v-model="addItem.id" class="form-select w-auto border-0 item" aria-label="Default select example">
                        <option value="1">分類</option>
                        <option value="2">標籤</option>
                    </select>
                    <input v-model="addItem.input" class="w-50 ps-2 pe-2 ms-4 item" :class="{inputErr: isExists}" type="text">
                    <button class="w-auto ms-4 btn btn-secondary">新增</button>
                </div>
            </div>
            <div class="result-category item">
                <div class="row justify-content-around m-0 list-header">
                    <div class="col-1">ID</div>
                    <div class="col-3">分類名稱</div>
                    <div class="col-2">管理員</div>
                    <div class="col-3"></div>
                </div>
                <div class="m-0 list-wrap">
                    <div v-for="item in category.resultList" class="row justify-content-around align-items-center m-0 list-content">
                        <div class="col-1">{{item.categoryId}}</div>
                        <div class="col-3">{{item.categoryName}}</div>
                        <div class="col-2">{{item.userId}}</div>
                        <div class="col-3 d-flex p-0 justify-content-center">
                            <button class="btn pt-0 pb-0"><img src="~/icon/pen.png" alt=""></button>
                            <button class="btn pt-0 pb-0"><img src="~/icon/delete.png" alt=""></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="result-hashtag item col-5 p-0">
            <div class="row justify-content-around m-0 list-header">
                <div class="col-1">ID</div>
                <div class="col-3">標籤名稱</div>
                <div class="col-2">管理員</div>
                <div class="col-3"></div>
            </div>
            <div class="m-0 list-wrap">
                <div v-for="item in hashtag.resultList" class="row justify-content-around align-items-center m-0 list-content">
                    <div class="col-1">{{item.hashtagId}}</div>
                    <div class="col-3">{{item.hashtagName}}</div>
                    <div class="col-2">{{item.userId}}</div>
                    <div class="col-3 d-flex p-0 justify-content-center">
                        <button class="btn pt-0 pb-0"><img src="~/icon/pen.png" alt=""></button>
                        <button class="btn pt-0 pb-0"><img src="~/icon/delete.png" alt=""></button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    let resultDiv = new Vue({
        el:"#resultDiv",
        data:{
            addItem:{
                id:1,
                input:""
            },
            category:{
                resultList:[],
                name:""
            },
            hashtag:{
                resultList:[],
                name:""
            },
            isExists: false
        },
        mounted: function(){
            const self = this;

            axios.get("../Api/Category/GetAllCategory")
            .then(res => {
                self.category.resultList = res.data;
                console.log(self.category.resultList);
            });
            axios.get("../Api/Category/GetAllHashtag")
            .then(res => {
                self.hashtag.resultList = res.data;
                console.log(self.hashtag.resultList);
            });
        },
        watch:{
            addItem: {
                handler(newValue,oldValue){
                        const self = this;
                        const item = this.addItem;
                        if(item.id === 1){
                            axios.get(`../Api/Category/CheckCategory/?categoryName=${item.input}`)
                            .then(res => {
                                if(res.data === true){
                                    self.isExists = true;
                                }else{
                                    self.isExists = false;
                                }
                            })
                        }else{
                            axios.get(`../Api/Category/CheckHashtag/?hashtagName=${item.input}`)
                            .then(res => {
                                if(res.data === true){
                                    self.isExists = true;
                                }else{
                                    self.isExists = false;
                                }
                            })
                        }
                },deep: true}
        },
        methods:{

        }
    });
</script>


@*<script>
    let getAll= function (e,name) {
    const self = e;
    axios.get(`../Api/Category/GetAll${name}`)
    .then(res => {
    self.resultList = res.data;
    console.log(self.resultList);
    })
    }


    //分類區塊
    let appCategory = new Vue({
    el: "#category",
    data: {
    resultList:[],
    category:{
    categoryName: "",
    //userId: "4",
    },
    isExists: false
    },
    mounted:function(){
    getAll(this,"category");
    },
    methods:{
    //驗證類別是否存在
    checkName: function(){
    const btn = document.querySelector("#btn-category")
    const self = this;
    axios.get(`../Api/Category/CheckCategory/?categoryName=${self.category.categoryName}`)
    .then(res =>{
    console.log(res);
    if(res.data === true){
    //如果存在的話把按鈕禁用
    self.isExists = true;
    btn.disabled = true;
    }else {
    self.isExists = false;
    btn.disabled = false;
    }
    })
    .catch(err => console.log(err));
    },
    addCategory: function(){
    const self = this;
    axios.post("../Api/Category/AddCategory",self.category)
    .then(res =>{
    if(res.data === true){
    alert(`類別 : ${self.category.categoryName}，新增成功`)
    getAll(self,"category");
    self.category.categoryName =""
    }else {
    alert("新增失敗");
    }
    })
    .catch(err => console.log(err));
    },
    deleteCategory: function (event) {
    const self = this;
    const categoryId = event.target.value;
    console.log(categoryId);
    axios.delete(`../Api/Category/DeleteCategory/?categoryId=${categoryId}`)
    .then(res => {
    if (res.data === true) {
    alert("類別刪除成功!");
    getAll(self,"category");
    }else {
    alert("類別刪除失敗!");
    }
    }
    ).catch(err => console.log(err));
    }
    }
    });


    //標籤區塊
    let appHashtag = new Vue({
    el: "#hashtag",
    data: {
    resultList:[],
    hashtag:{
    hashtagName: "",
    //userId: "4",
    },
    isExists: false
    },
    mounted: function(){
    getAll(this,"hashTag");
    },
    methods:{
    //驗證類別是否存在
    checkName: function(){
    const btn = document.querySelector("#btn-hashtag")
    const self = this;
    axios.get(`../Api/Category/CheckHashTag/?hashtagName=${self.hashtag.hashtagName}`)
    .then(res =>{
    console.log(res);
    if(res.data === true){
    //如果存在的話把按鈕禁用
    self.isExists = true;
    btn.disabled = true;
    }else {
    self.isExists = false;
    btn.disabled = false;
    }
    })
    .catch(err => console.log(err));
    },
    addHashtag: function(){
    const self = this;
    axios.post("../Api/Category/AddHashtag",self.hashtag)
    .then(res =>{
    if(res.data === true){
    alert(`類別 : ${self.hashtag.hashtagName}，新增成功`)
    getAll(self,"hashtag");
    self.hashtag.hashtagName ="";
    }else {
    alert("新增失敗");
    }
    })
    .catch(err => console.log(err));
    },
    deleteHashtag: function (event) {
    const self = this;
    const hashtagId = event.target.value;
    console.log(hashtagId);
    axios.delete(`../Api/Category/DeleteHashtag/?hashtagId=${hashtagId}`)
    .then(res => {
    if (res.data === true) {
    alert("類別刪除成功!");
    getAll(self,"hashTag");
    }else {
    alert("類別刪除失敗!");
    }
    }
    ).catch(err => console.log(err));
    }
    }
    });
    </script>*@